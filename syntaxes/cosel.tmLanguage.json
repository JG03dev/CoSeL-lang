{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "CoSeL",
    "scopeName": "source.cosel",
    "fileTypes": ["csl", "csm"],
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#preprocessor"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#types"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#variable"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.block",
                    "begin": "/\\*",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.begin"
                        }
                    },
                    "end": "\\*/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.end"
                        }
                    }
                },
                {
                    "name": "comment.line",
                    "match": "//.*"
                }
            ]
        },
        "preprocessor": {
            "patterns": [
                {
                    "name": "meta.preprocessor",
                    "begin": "^\\s*#",
                    "end": "$",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.preprocessor"
                        }
                    }
                }
            ]
        },
        "keywords":{
            "patterns": [
                {
                    "include": "#control"
                },
                {
                    "include": "#declarations"
                },
                {
                    "include": "#control"
                },
                {
                    "include": "#constants"
                }
            ]

        },
        "control": {
            "patterns": [
                {
                    "name": "keyword.control",
                    "match": "\\b(asm|break|continue|else|for|goto|if|return|coerce|while|cimport|try|catch|new|typep|Search|do|priority|Found|Finally|throw|Throw|from|hide|private|overload|cover|NoRedefine|Void|NodeTypeOf|AFun|AProc|APlace|AThrower|FunClosure|ProcClosure|PlaceClosure|ThrowerClosure|This|custom|LexicalExtent|ReadOnly|div|TypeOf)\\b"
                }
            ]
        },
        "declarations": {
            "patterns": [
                {
                    "name": "keyword.declaration",
                    "match": "\\b(public|Var|var|fun|Fun|macro|place|sform|type|const|proc|Proc|label|Switch|Others|Let|In|Coercion|Thrower|Constructor)\\b"
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "name": "constant.language",
                    "match": "\\b(true|false|unbound|True|False|Unbound|EOF|EndL)\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "storage.type",
                    "match": "\\b(Bool|Link|Real|Char|Int|Node|NodeRef|Whole|NodeType|bool|link|real|char|int|node|nodeRef|whole|nodeType)\\b"
                }
            ]
        },
        "modifiers": {
            "patterns": [
                {
                    "name": "storage.modifier",
                    "match": "\\b()\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double",
                    "begin": "\"",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin"
                        }
                    },
                    "end": "\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end"
                        }
                    },
                    "patterns": [
                        {
                            "name": "constant.character.escape",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.single",
                    "begin": "'",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin"
                        }
                    },
                    "end": "'",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end"
                        }
                    },
                    "patterns": [
                        {
                            "name": "constant.character.escape",
                            "match": "\\\\."
                        }
                    ]
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric",
                    "match": "\\b(\\d*\\.?\\d+)\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator",
                    "match": "\\b(::=|::|<-|\\+\\+|--|\\[|\\]|/|\\*|\\+|-|:|,|;|\\.|\\|\\||\\||&&|&|=>|=|<=|>=|<|>|!|~|\\?=|\\.\\.\\.|\\.\\.|\\(|\\)|@|\\$|div)\\b"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "entity.name.function",
                    "match": "\\b([a-zA-Z_]\\w*)\\s*\\("
                }
            ]
        }
    }
}
